name: 'Finops & Terraform'

on:
  push:
    branches: [ "main" ]
    paths-ignore:
      - 'baseplan.json'
  pull_request:
  workflow_dispatch:
    inputs:
      choice:
        type: choice
        description: Select an evironment
        options:
        - dev
        - staging
        - prod

permissions:
  contents: write

env:
  ARM_SUBSCRIPTION_ID: "${{ secrets.ARM_SUBSCRIPTION_ID }}"
  ARM_TENANT_ID: "${{ secrets.ARM_TENANT_ID }}"
  ARM_CLIENT_ID: "${{ secrets.ARM_CLIENT_ID }}"
  ARM_CLIENT_SECRET: "${{ secrets.ARM_CLIENT_SECRET }}" 
  

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3
    
    # Setup Infracost  
    - name: Setup Infracost
      uses: infracost/actions/setup@v2
      with:
        api-key: ${{ secrets.INFRACOST_API_KEY }}
          
    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      #with:
        #cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check
           
    # Generates an execution plan for Terraform
    - name: Terraform Plan with Base Benchmark variables
      run: |
          terraform plan -input=false -var-file=base.tfvars  -out tfbaseplan.binary 
          terraform show -json tfbaseplan.binary > baseplan.json
          infracost breakdown --path baseplan.json --out-file baseplan.json --format json
          terraform plan -input=false -var-file="${{ github.event.inputs.choice }}".tfvars  -out "tf${{ github.event.inputs.choice }}"plan.binary 
          terraform show -json "tf${{ github.event.inputs.choice }}"plan.binary  > "tf${{ github.event.inputs.choice }}"plan.json
          infracost breakdown --path "tf${{ github.event.inputs.choice }}"plan.json --out-file baseplan.jso"tf${{ github.event.inputs.choice }}"plan.json --format json
          infracost diff --format=json --path baseplan.json --compare-to "tf${{ github.event.inputs.choice }}"plan.json

    - name: Commit Base Plan
      run: |
          git add baseplan.json
          git config --global user.name 'Register6291'
          git config --global user.email 'register6291@users.noreply.github.com'
          git commit -am "Base infra baseplan.json"
          git push      

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    #- name: Terraform Apply
    #  if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
    #  run: terraform apply -auto-approve -input=false
